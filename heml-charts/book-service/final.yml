[debug] Created tunnel using local port: '58716'

[debug] SERVER: "127.0.0.1:58716"

[debug] Original chart version: ""
[debug] CHART PATH: /Users/sreenivasay/workspace/kube-decc/book-service/heml-charts/book-service

NAME:   book-service
REVISION: 1
RELEASED: Sun May 10 19:51:53 2020
CHART: book-service-0.1.0
USER-SUPPLIED VALUES:
{}

COMPUTED VALUES:
affinity: {}
env:
- name: SPRING_DATASOURCE_URL
  value: jdbc:postgresql://postgres-postgresql:5432/books_service
- name: SPRING_DATASOURCE_USERNAME
  value: postgres
- name: SPRING_DATASOURCE_PASSWORD
  value: postgres
fullnameOverride: ""
image:
  pullPolicy: IfNotPresent
  repository: ysree/book-service
  tag: latest
imagePullSecrets: []
ingress:
  annotations: {}
  enabled: false
  hosts:
  - host: chart-example.local
    paths: []
  tls: []
nameOverride: ""
nodeSelector: {}
podSecurityContext: {}
replicaCount: 1
resources:
  limits:
    cpu: 2000m
    memory: 2Gi
  requests:
    cpu: 1000m
    memory: 1Gi
securityContext: {}
service:
  port: 8080
  type: LoadBalancer
serviceAccount:
  create: true
  name: null
tolerations: []

HOOKS:
---
# book-service-test-connection
apiVersion: v1
kind: Pod
metadata:
  name: "book-service-test-connection"
  labels:
    app.kubernetes.io/name: book-service
    helm.sh/chart: book-service-0.1.0
    app.kubernetes.io/instance: book-service
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Tiller
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args:  ['book-service:8080']
  restartPolicy: Never
MANIFEST:

---
# Source: book-service/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: book-service
  labels:
    app.kubernetes.io/name: book-service
    helm.sh/chart: book-service-0.1.0
    app.kubernetes.io/instance: book-service
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Tiller
---
# Source: book-service/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: book-service
  labels:
    app.kubernetes.io/name: book-service
    helm.sh/chart: book-service-0.1.0
    app.kubernetes.io/instance: book-service
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Tiller
spec:
  type: LoadBalancer
  ports:
    - port: 8080
      targetPort: 8080
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: book-service
    app.kubernetes.io/instance: book-service
---
# Source: book-service/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: book-service
  labels:
    app.kubernetes.io/name: book-service
    helm.sh/chart: book-service-0.1.0
    app.kubernetes.io/instance: book-service
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Tiller
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: book-service
      app.kubernetes.io/instance: book-service
  template:
    metadata:
      labels:
        app.kubernetes.io/name: book-service
        app.kubernetes.io/instance: book-service
    spec:
      serviceAccountName: book-service
      containers:
        - name: book-service
          image: "ysree/book-service:latest"
          imagePullPolicy: IfNotPresent
          env:
            
            - name: SPRING_DATASOURCE_URL
              value: jdbc:postgresql://postgres-postgresql:5432/books_service
            - name: SPRING_DATASOURCE_USERNAME
              value: postgres
            - name: SPRING_DATASOURCE_PASSWORD
              value: postgres
            
          ports:
            - name: book-service
              containerPort: 8080
              protocol: TCP
          resources:
            limits:
              cpu: 2000m
              memory: 2Gi
            requests:
              cpu: 1000m
              memory: 1Gi
